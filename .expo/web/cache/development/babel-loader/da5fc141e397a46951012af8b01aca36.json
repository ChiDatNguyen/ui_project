{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Icon = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _getIconType = _interopRequireDefault(require(\"../helpers/getIconType\"));\n\nvar _config = require(\"../config\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\SyViet\\\\Documents\\\\GitHub\\\\ui_project\\\\node_modules\\\\react-native-elements\\\\src\\\\icons\\\\Icon.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Icon = function Icon(props) {\n  var type = props.type,\n      name = props.name,\n      size = props.size,\n      color = props.color,\n      iconStyle = props.iconStyle,\n      underlayColor = props.underlayColor,\n      reverse = props.reverse,\n      raised = props.raised,\n      containerStyle = props.containerStyle,\n      reverseColor = props.reverseColor,\n      disabled = props.disabled,\n      disabledStyle = props.disabledStyle,\n      onPress = props.onPress,\n      _props$Component = props.Component,\n      Component = _props$Component === void 0 ? onPress ? _reactNative.Platform.select({\n    android: _reactNative.TouchableNativeFeedback,\n    default: _reactNative.TouchableHighlight\n  }) : _reactNative.View : _props$Component,\n      solid = props.solid,\n      brand = props.brand,\n      attributes = (0, _objectWithoutProperties2.default)(props, [\"type\", \"name\", \"size\", \"color\", \"iconStyle\", \"underlayColor\", \"reverse\", \"raised\", \"containerStyle\", \"reverseColor\", \"disabled\", \"disabledStyle\", \"onPress\", \"Component\", \"solid\", \"brand\"]);\n  var IconComponent = (0, _getIconType.default)(type);\n\n  var getBackgroundColor = function getBackgroundColor() {\n    if (reverse) {\n      return color;\n    }\n\n    return raised ? 'white' : 'transparent';\n  };\n\n  var buttonStyles = {\n    borderRadius: size + 4,\n    height: size * 2 + 4,\n    width: size * 2 + 4\n  };\n\n  if (_reactNative.Platform.OS === 'android' && !attributes.background) {\n    if (_reactNative.Platform.Version >= 21) {\n      attributes.background = _reactNative.TouchableNativeFeedback.Ripple((0, _color.default)(color).alpha(0.2).rgb().string(), true);\n    }\n  }\n\n  return _react.default.createElement(_reactNative.View, {\n    style: _reactNative.StyleSheet.flatten([styles.container, (reverse || raised) && styles.button, (reverse || raised) && buttonStyles, raised && styles.raised, iconStyle && iconStyle.borderRadius ? {\n      borderRadius: iconStyle.borderRadius\n    } : {}, containerStyle && containerStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Component, (0, _extends2.default)({}, attributes, onPress && {\n    onPress: onPress,\n    disabled: disabled,\n    underlayColor: reverse ? color : underlayColor,\n    activeOpacity: 0.3\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: _reactNative.StyleSheet.flatten([(reverse || raised) && buttonStyles, {\n      backgroundColor: getBackgroundColor(),\n      alignItems: 'center',\n      justifyContent: 'center'\n    }, disabled && styles.disabled, disabled && disabledStyle]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(IconComponent, {\n    testID: \"iconIcon\",\n    style: _reactNative.StyleSheet.flatten([{\n      backgroundColor: 'transparent'\n    }, iconStyle && iconStyle]),\n    size: size,\n    name: name,\n    color: reverse ? reverseColor : color,\n    solid: solid,\n    brand: brand,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexports.Icon = Icon;\nIcon.propTypes = {\n  type: _propTypes.default.string,\n  name: _propTypes.default.string,\n  size: _propTypes.default.number,\n  color: _propTypes.default.string,\n  Component: _propTypes.default.elementType,\n  underlayColor: _propTypes.default.string,\n  reverse: _propTypes.default.bool,\n  raised: _propTypes.default.bool,\n  containerStyle: _config.ViewPropTypes.style,\n  iconStyle: _reactNative.Text.propTypes.style,\n  onPress: _propTypes.default.func,\n  reverseColor: _propTypes.default.string,\n  disabled: _propTypes.default.bool,\n  disabledStyle: _config.ViewPropTypes.style,\n  solid: _propTypes.default.bool,\n  brand: _propTypes.default.bool\n};\nIcon.defaultProps = {\n  underlayColor: 'transparent',\n  reverse: false,\n  raised: false,\n  size: 24,\n  color: 'black',\n  reverseColor: 'white',\n  disabled: false,\n  type: 'material',\n  solid: false,\n  brand: false\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  button: {\n    margin: 7\n  },\n  raised: _objectSpread({}, _reactNative.Platform.select({\n    android: {\n      elevation: 2\n    },\n    default: {\n      shadowColor: 'rgba(0,0,0, .4)',\n      shadowOffset: {\n        height: 1,\n        width: 1\n      },\n      shadowOpacity: 1,\n      shadowRadius: 1\n    }\n  })),\n  disabled: {\n    backgroundColor: '#D1D5D8'\n  }\n});\n\nvar _default = (0, _config.withTheme)(Icon, 'Icon');\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/SyViet/Documents/GitHub/ui_project/node_modules/react-native-elements/src/icons/Icon.js"],"names":["Icon","props","type","name","size","color","iconStyle","underlayColor","reverse","raised","containerStyle","reverseColor","disabled","disabledStyle","onPress","Component","Platform","select","android","TouchableNativeFeedback","default","TouchableHighlight","View","solid","brand","attributes","IconComponent","getBackgroundColor","buttonStyles","borderRadius","height","width","OS","background","Version","Ripple","alpha","rgb","string","StyleSheet","flatten","styles","container","button","activeOpacity","backgroundColor","alignItems","justifyContent","propTypes","PropTypes","number","elementType","bool","ViewPropTypes","style","NativeText","func","defaultProps","create","overflow","margin","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Platform,\n  TouchableHighlight,\n  View,\n  StyleSheet,\n  Text as NativeText,\n  TouchableNativeFeedback,\n} from 'react-native';\nimport Color from 'color';\n\nimport getIconType from '../helpers/getIconType';\nimport { ViewPropTypes, withTheme } from '../config';\n\nconst Icon = props => {\n  const {\n    type,\n    name,\n    size,\n    color,\n    iconStyle,\n    underlayColor,\n    reverse,\n    raised,\n    containerStyle,\n    reverseColor,\n    disabled,\n    disabledStyle,\n    onPress,\n    Component = onPress\n      ? Platform.select({\n          android: TouchableNativeFeedback,\n          default: TouchableHighlight,\n        })\n      : View,\n    solid,\n    brand,\n    ...attributes\n  } = props;\n\n  const IconComponent = getIconType(type);\n  const getBackgroundColor = () => {\n    if (reverse) {\n      return color;\n    }\n\n    return raised ? 'white' : 'transparent';\n  };\n\n  const buttonStyles = {\n    borderRadius: size + 4,\n    height: size * 2 + 4,\n    width: size * 2 + 4,\n  };\n\n  if (Platform.OS === 'android' && !attributes.background) {\n    if (Platform.Version >= 21) {\n      attributes.background = TouchableNativeFeedback.Ripple(\n        Color(color)\n          .alpha(0.2)\n          .rgb()\n          .string(),\n        true\n      );\n    }\n  }\n\n  return (\n    <View\n      style={StyleSheet.flatten([\n        styles.container,\n        (reverse || raised) && styles.button,\n        (reverse || raised) && buttonStyles,\n        raised && styles.raised,\n        iconStyle && iconStyle.borderRadius\n          ? {\n              borderRadius: iconStyle.borderRadius,\n            }\n          : {},\n        containerStyle && containerStyle,\n      ])}\n    >\n      <Component\n        {...attributes}\n        {...onPress && {\n          onPress,\n          disabled,\n          underlayColor: reverse ? color : underlayColor,\n          activeOpacity: 0.3,\n        }}\n      >\n        <View\n          style={StyleSheet.flatten([\n            (reverse || raised) && buttonStyles,\n            {\n              backgroundColor: getBackgroundColor(),\n              alignItems: 'center',\n              justifyContent: 'center',\n            },\n            disabled && styles.disabled,\n            disabled && disabledStyle,\n          ])}\n        >\n          <IconComponent\n            testID=\"iconIcon\"\n            style={StyleSheet.flatten([\n              { backgroundColor: 'transparent' },\n              iconStyle && iconStyle,\n            ])}\n            size={size}\n            name={name}\n            color={reverse ? reverseColor : color}\n            solid={solid}\n            brand={brand}\n          />\n        </View>\n      </Component>\n    </View>\n  );\n};\n\nIcon.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  Component: PropTypes.elementType,\n  underlayColor: PropTypes.string,\n  reverse: PropTypes.bool,\n  raised: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  iconStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  reverseColor: PropTypes.string,\n  disabled: PropTypes.bool,\n  disabledStyle: ViewPropTypes.style,\n  solid: PropTypes.bool,\n  brand: PropTypes.bool,\n};\n\nIcon.defaultProps = {\n  underlayColor: 'transparent',\n  reverse: false,\n  raised: false,\n  size: 24,\n  color: 'black',\n  reverseColor: 'white',\n  disabled: false,\n  type: 'material',\n  solid: false,\n  brand: false,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  button: {\n    margin: 7,\n  },\n  raised: {\n    ...Platform.select({\n      android: {\n        elevation: 2,\n      },\n      default: {\n        shadowColor: 'rgba(0,0,0, .4)',\n        shadowOffset: { height: 1, width: 1 },\n        shadowOpacity: 1,\n        shadowRadius: 1,\n      },\n    }),\n  },\n  disabled: {\n    backgroundColor: '#D1D5D8',\n  },\n});\n\nexport { Icon };\nexport default withTheme(Icon, 'Icon');\n"]},"metadata":{},"sourceType":"script"}