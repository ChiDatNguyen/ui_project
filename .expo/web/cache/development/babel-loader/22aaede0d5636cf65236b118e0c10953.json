{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Tooltip = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _config = require(\"../config\");\n\nvar _helpers = require(\"../helpers\");\n\nvar _Triangle = _interopRequireDefault(require(\"./Triangle\"));\n\nvar _getTooltipCoordinate2 = _interopRequireWildcard(require(\"./getTooltipCoordinate\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\SyViet\\\\Documents\\\\GitHub\\\\ui_project\\\\node_modules\\\\react-native-elements\\\\src\\\\tooltip\\\\Tooltip.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Tooltip = function (_React$PureComponent) {\n  (0, _inherits2.default)(Tooltip, _React$PureComponent);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Tooltip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isVisible: false,\n      yOffset: 0,\n      xOffset: 0,\n      elementWidth: 0,\n      elementHeight: 0\n    };\n\n    _this.toggleTooltip = function () {\n      var onClose = _this.props.onClose;\n\n      _this.getElementPosition();\n\n      _this.setState(function (prevState) {\n        if (prevState.isVisible && !_helpers.isIOS) {\n          onClose && onClose();\n        }\n\n        return {\n          isVisible: !prevState.isVisible\n        };\n      });\n    };\n\n    _this.wrapWithPress = function (toggleOnPress, children) {\n      if (toggleOnPress) {\n        return _react.default.createElement(_reactNative.TouchableOpacity, {\n          onPress: _this.toggleTooltip,\n          activeOpacity: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 9\n          }\n        }, children);\n      }\n\n      return children;\n    };\n\n    _this.getTooltipStyle = function () {\n      var _this$state = _this.state,\n          yOffset = _this$state.yOffset,\n          xOffset = _this$state.xOffset,\n          elementHeight = _this$state.elementHeight,\n          elementWidth = _this$state.elementWidth;\n      var _this$props = _this.props,\n          height = _this$props.height,\n          backgroundColor = _this$props.backgroundColor,\n          width = _this$props.width,\n          withPointer = _this$props.withPointer,\n          containerStyle = _this$props.containerStyle;\n\n      var _getTooltipCoordinate = (0, _getTooltipCoordinate2.default)(xOffset, yOffset, elementWidth, elementHeight, _helpers.ScreenWidth, _helpers.ScreenHeight, width, height, withPointer),\n          x = _getTooltipCoordinate.x,\n          y = _getTooltipCoordinate.y;\n\n      return _objectSpread({\n        position: 'absolute',\n        left: x,\n        top: y,\n        width: width,\n        height: height,\n        backgroundColor: backgroundColor,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flex: 1,\n        borderRadius: 10,\n        padding: 10\n      }, containerStyle);\n    };\n\n    _this.renderPointer = function (tooltipY) {\n      var _this$state2 = _this.state,\n          yOffset = _this$state2.yOffset,\n          xOffset = _this$state2.xOffset,\n          elementHeight = _this$state2.elementHeight,\n          elementWidth = _this$state2.elementWidth;\n      var _this$props2 = _this.props,\n          backgroundColor = _this$props2.backgroundColor,\n          pointerColor = _this$props2.pointerColor;\n      var pastMiddleLine = yOffset > tooltipY;\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n          left: xOffset + (0, _getTooltipCoordinate2.getElementVisibleWidth)(elementWidth, xOffset, _helpers.ScreenWidth) / 2 - 7.5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_Triangle.default, {\n        style: {\n          borderBottomColor: pointerColor || backgroundColor\n        },\n        isDown: pastMiddleLine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderContent = function (withTooltip) {\n      var _this$props3 = _this.props,\n          popover = _this$props3.popover,\n          withPointer = _this$props3.withPointer,\n          toggleOnPress = _this$props3.toggleOnPress,\n          highlightColor = _this$props3.highlightColor;\n\n      if (!withTooltip) {\n        return _this.wrapWithPress(toggleOnPress, _this.props.children);\n      }\n\n      var _this$state3 = _this.state,\n          yOffset = _this$state3.yOffset,\n          xOffset = _this$state3.xOffset,\n          elementWidth = _this$state3.elementWidth,\n          elementHeight = _this$state3.elementHeight;\n\n      var tooltipStyle = _this.getTooltipStyle();\n\n      return _react.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: {\n          position: 'absolute',\n          top: yOffset,\n          left: xOffset,\n          backgroundColor: highlightColor,\n          overflow: 'visible',\n          width: elementWidth,\n          height: elementHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, _this.props.children), withPointer && _this.renderPointer(tooltipStyle.top), _react.default.createElement(_reactNative.View, {\n        style: tooltipStyle,\n        testID: \"tooltipPopoverContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, popover));\n    };\n\n    _this.getElementPosition = function () {\n      var skipAndroidStatusBar = _this.props.skipAndroidStatusBar;\n      _this.renderedElement && _this.renderedElement.measure(function (frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) {\n        _this.setState({\n          xOffset: pageOffsetX,\n          yOffset: _helpers.isIOS || skipAndroidStatusBar ? pageOffsetY : pageOffsetY - _reactNative.StatusBar.currentHeight,\n          elementWidth: width,\n          elementHeight: height\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setTimeout(this.getElementPosition, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isVisible = this.state.isVisible;\n      var _this$props4 = this.props,\n          onClose = _this$props4.onClose,\n          withOverlay = _this$props4.withOverlay,\n          overlayColor = _this$props4.overlayColor,\n          onOpen = _this$props4.onOpen,\n          ModalComponent = _this$props4.ModalComponent;\n      return _react.default.createElement(_reactNative.View, {\n        collapsable: false,\n        ref: function ref(e) {\n          _this2.renderedElement = e;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 7\n        }\n      }, this.renderContent(false), _react.default.createElement(ModalComponent, {\n        animationType: \"fade\",\n        visible: isVisible,\n        transparent: true,\n        onDismiss: onClose,\n        onShow: onOpen,\n        onRequestClose: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.TouchableOpacity, {\n        style: styles.container(withOverlay, overlayColor),\n        onPress: this.toggleTooltip,\n        activeOpacity: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      }, this.renderContent(true))));\n    }\n  }]);\n  return Tooltip;\n}(_react.default.PureComponent);\n\nexports.Tooltip = Tooltip;\nTooltip.propTypes = {\n  children: _propTypes.default.element,\n  withPointer: _propTypes.default.bool,\n  popover: _propTypes.default.element,\n  toggleOnPress: _propTypes.default.bool,\n  height: _propTypes.default.number,\n  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n  containerStyle: _config.ViewPropTypes.style,\n  pointerColor: _propTypes.default.string,\n  onClose: _propTypes.default.func,\n  onOpen: _propTypes.default.func,\n  overlayColor: _propTypes.default.string,\n  withOverlay: _propTypes.default.bool,\n  backgroundColor: _propTypes.default.string,\n  highlightColor: _propTypes.default.string,\n  skipAndroidStatusBar: _propTypes.default.bool,\n  ModalComponent: _propTypes.default.elementType\n};\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: function onClose() {},\n  onOpen: function onOpen() {},\n  skipAndroidStatusBar: false,\n  ModalComponent: _reactNative.Modal\n};\nvar styles = {\n  container: function container(withOverlay, overlayColor) {\n    return {\n      backgroundColor: withOverlay ? overlayColor : 'transparent',\n      flex: 1\n    };\n  }\n};\n\nvar _default = (0, _config.withTheme)(Tooltip, 'Tooltip');\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/SyViet/Documents/GitHub/ui_project/node_modules/react-native-elements/src/tooltip/Tooltip.js"],"names":["Tooltip","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","onClose","props","getElementPosition","setState","prevState","isIOS","wrapWithPress","toggleOnPress","children","getTooltipStyle","height","backgroundColor","width","withPointer","containerStyle","ScreenWidth","ScreenHeight","x","y","position","left","top","display","alignItems","justifyContent","flex","borderRadius","padding","renderPointer","tooltipY","pointerColor","pastMiddleLine","borderBottomColor","renderContent","withTooltip","popover","highlightColor","tooltipStyle","overflow","skipAndroidStatusBar","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","StatusBar","currentHeight","setTimeout","withOverlay","overlayColor","onOpen","ModalComponent","e","styles","container","React","PureComponent","propTypes","PropTypes","element","bool","number","oneOfType","string","ViewPropTypes","style","func","elementType","defaultProps","Modal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity, Modal, View, StatusBar } from 'react-native';\n\nimport { ViewPropTypes, withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\n\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, {\n  getElementVisibleWidth,\n} from './getTooltipCoordinate';\n\nclass Tooltip extends React.PureComponent {\n  state = {\n    isVisible: false,\n    yOffset: 0,\n    xOffset: 0,\n    elementWidth: 0,\n    elementHeight: 0,\n  };\n\n  renderedElement;\n\n  toggleTooltip = () => {\n    const { onClose } = this.props;\n    this.getElementPosition();\n    this.setState(prevState => {\n      if (prevState.isVisible && !isIOS) {\n        onClose && onClose();\n      }\n\n      return { isVisible: !prevState.isVisible };\n    });\n  };\n\n  wrapWithPress = (toggleOnPress, children) => {\n    if (toggleOnPress) {\n      return (\n        <TouchableOpacity onPress={this.toggleTooltip} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n\n    return children;\n  };\n\n  getTooltipStyle = () => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const {\n      height,\n      backgroundColor,\n      width,\n      withPointer,\n      containerStyle,\n    } = this.props;\n\n    const { x, y } = getTooltipCoordinate(\n      xOffset,\n      yOffset,\n      elementWidth,\n      elementHeight,\n      ScreenWidth,\n      ScreenHeight,\n      width,\n      height,\n      withPointer\n    );\n\n    return {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height,\n      backgroundColor,\n      // default styles\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flex: 1,\n      borderRadius: 10,\n      padding: 10,\n      ...containerStyle,\n    };\n  };\n\n  renderPointer = tooltipY => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const { backgroundColor, pointerColor } = this.props;\n    const pastMiddleLine = yOffset > tooltipY;\n\n    return (\n      <View\n        style={{\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n          left:\n            xOffset +\n            getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n            7.5,\n        }}\n      >\n        <Triangle\n          style={{ borderBottomColor: pointerColor || backgroundColor }}\n          isDown={pastMiddleLine}\n        />\n      </View>\n    );\n  };\n\n  renderContent = withTooltip => {\n    const { popover, withPointer, toggleOnPress, highlightColor } = this.props;\n\n    if (!withTooltip) {\n      return this.wrapWithPress(toggleOnPress, this.props.children);\n    }\n\n    const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n    const tooltipStyle = this.getTooltipStyle();\n    return (\n      <View>\n        <View\n          style={{\n            position: 'absolute',\n            top: yOffset,\n            left: xOffset,\n            backgroundColor: highlightColor,\n            overflow: 'visible',\n            width: elementWidth,\n            height: elementHeight,\n          }}\n        >\n          {this.props.children}\n        </View>\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>\n    );\n  };\n\n  componentDidMount() {\n    // wait to compute onLayout values.\n    setTimeout(this.getElementPosition, 500);\n  }\n\n  getElementPosition = () => {\n    const { skipAndroidStatusBar } = this.props;\n    this.renderedElement &&\n      this.renderedElement.measure(\n        (\n          frameOffsetX,\n          frameOffsetY,\n          width,\n          height,\n          pageOffsetX,\n          pageOffsetY\n        ) => {\n          this.setState({\n            xOffset: pageOffsetX,\n            yOffset:\n              isIOS || skipAndroidStatusBar\n                ? pageOffsetY\n                : pageOffsetY - StatusBar.currentHeight,\n            elementWidth: width,\n            elementHeight: height,\n          });\n        }\n      );\n  };\n\n  render() {\n    const { isVisible } = this.state;\n    const {\n      onClose,\n      withOverlay,\n      overlayColor,\n      onOpen,\n      ModalComponent,\n    } = this.props;\n\n    return (\n      <View\n        collapsable={false}\n        ref={e => {\n          this.renderedElement = e;\n        }}\n      >\n        {this.renderContent(false)}\n        <ModalComponent\n          animationType=\"fade\"\n          visible={isVisible}\n          transparent\n          onDismiss={onClose}\n          onShow={onOpen}\n          onRequestClose={onClose}\n        >\n          <TouchableOpacity\n            style={styles.container(withOverlay, overlayColor)}\n            onPress={this.toggleTooltip}\n            activeOpacity={1}\n          >\n            {this.renderContent(true)}\n          </TouchableOpacity>\n        </ModalComponent>\n      </View>\n    );\n  }\n}\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: ViewPropTypes.style,\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string,\n  skipAndroidStatusBar: PropTypes.bool,\n  ModalComponent: PropTypes.elementType,\n};\n\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: () => {},\n  onOpen: () => {},\n  skipAndroidStatusBar: false,\n  ModalComponent: Modal,\n};\n\nconst styles = {\n  container: (withOverlay, overlayColor) => ({\n    backgroundColor: withOverlay ? overlayColor : 'transparent',\n    flex: 1,\n  }),\n};\n\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');\n"]},"metadata":{},"sourceType":"script"}